{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Desktop/Projects/FilmCritic/client/src/Pages/MoviePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport requests from '../Constants/Requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IMG_API = \"https://image.tmdb.org/t/p/w1280\";\n\nconst MoviePage = props => {\n  _s();\n\n  const [movie, setMovie] = useState({});\n  var tempUrl = props.location.pathname;\n  tempUrl = tempUrl.slice(7, tempUrl.length);\n  const movieId = tempUrl.slice(0, tempUrl.indexOf('/'));\n  useEffect(() => {\n    const movieUrl = requests.fetchMovie(movieId).url;\n    fetch(movieUrl).then(res => res.json()).then(data => {\n      if (data.status_message) {\n        return;\n      }\n\n      setMovie(data);\n      console.log(movie);\n    });\n  }, []);\n\n  const movieNotFound = () => {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-white text-center\",\n      style: {\n        paddingTop: '10rem'\n      },\n      children: \"Movie not found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  };\n\n  const movieInfo = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid px-0\",\n      style: {\n        background: 'rgba(29, 29, 35, 1)',\n        paddingBottom: '5rem',\n        paddingTop: '5rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid px-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"img-container col-3\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: IMG_API + movie.poster_path,\n              alt: movie.title,\n              style: {\n                width: '100%',\n                textShadow: '3px 3px 10px red;'\n              }\n            }, movie.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"py-2 form-title col\",\n            style: {\n              fontSize: '48px',\n              textShadow: '4px 4px rgba(80, 80, 100, 1)'\n            },\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      backgroundColor: \"rgba(29, 29, 35, 1)\"\n    },\n    children: movie.hasOwnProperty('title') ? movieInfo() : movieNotFound()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MoviePage, \"vjn7l2Xfyv8U759KvgOto7g+Dfw=\");\n\n_c = MoviePage;\nexport default MoviePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"sources":["/Users/daniel/Desktop/Projects/FilmCritic/client/src/Pages/MoviePage.js"],"names":["React","useEffect","useState","requests","IMG_API","MoviePage","props","movie","setMovie","tempUrl","location","pathname","slice","length","movieId","indexOf","movieUrl","fetchMovie","url","fetch","then","res","json","data","status_message","console","log","movieNotFound","paddingTop","movieInfo","background","paddingBottom","poster_path","title","width","textShadow","id","fontSize","backgroundColor","hasOwnProperty"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport requests from '../Constants/Requests';\nconst IMG_API = \"https://image.tmdb.org/t/p/w1280\";\n\nconst MoviePage = (props) => {\n    const [movie, setMovie] = useState({});\n    var tempUrl = props.location.pathname;\n    tempUrl = tempUrl.slice(7,tempUrl.length);\n\n    const movieId = tempUrl.slice(0, tempUrl.indexOf('/'));\n\n    useEffect(() => {\n        const movieUrl = requests.fetchMovie(movieId).url;\n        fetch(movieUrl).then(res => res.json())\n        .then(data => {\n            if (data.status_message) {\n                return;\n            }\n            setMovie(data);\n            console.log(movie);\n        });\n      }, [])\n\n    const movieNotFound = () => {\n        return (\n            <h1 className=\"text-white text-center\" style={{\n                paddingTop: '10rem'\n            }}>Movie not found!</h1>\n        )\n    }\n\n    const movieInfo = () => {\n        return (\n            <div className=\"container-fluid px-0\" style={{\n            background: 'rgba(29, 29, 35, 1)',\n            paddingBottom: '5rem',\n            paddingTop: '5rem',\n        }}>\n            <div className=\"container-fluid px-4\">\n                <div className=\"row\">\n                    <div className=\"img-container col-3\">\n                    <img key={movie.id} src={IMG_API + movie.poster_path} alt={movie.title} \n                        style={{\n                            width: '100%',\n                            textShadow: '3px 3px 10px red;'\n                        }}\n                    />\n                    </div>\n                    <h1 className=\"py-2 form-title col\" style={{\n                        fontSize: '48px',\n                        textShadow: '4px 4px rgba(80, 80, 100, 1)',\n                    }}>{movie.title}</h1>\n                </div>\n            </div> \n        </div>\n        )\n    }\n    \n    return (\n        <div className=\"container-fluid\" style={{\n            backgroundColor: \"rgba(29, 29, 35, 1)\",\n        }}>\n            {movie.hasOwnProperty('title') ?\n                movieInfo()\n            :\n                movieNotFound()\n            }\n        </div>\n    )\n}\n\nexport default MoviePage;"]},"metadata":{},"sourceType":"module"}