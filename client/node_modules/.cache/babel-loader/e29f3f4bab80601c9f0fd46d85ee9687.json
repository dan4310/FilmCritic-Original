{"ast":null,"code":"import axios from 'axios';\nimport { createSlice, createAsyncThunk, current } from '@reduxjs/toolkit';\nexport const addLike = createAsyncThunk('review/addLike', async ({\n  reviewId,\n  userId,\n  likeDate\n}) => {\n  return await axios.post(\"http://localhost:3001/addLike\", {\n    reviewId: reviewId,\n    likerId: userId,\n    likeDate: likeDate\n  }).then((response, err) => {\n    if (response.data.success === false) {\n      console.log(response.data.message);\n      return null;\n    } else {\n      return response.data;\n    }\n  });\n});\nexport const removeLike = createAsyncThunk('review/removeLike', async ({\n  reviewId,\n  userId\n}) => {\n  return await axios.post(\"http://localhost:3001/removeLike\", {\n    reviewId: reviewId,\n    likerId: userId\n  }).then((response, err) => {\n    if (response.data.success === false) {\n      console.log(response.data.message);\n      return null;\n    } else {\n      return response.data;\n    }\n  });\n});\nexport const movieSlice = createSlice({\n  name: 'movie',\n  initialState: {\n    isLoading: true,\n    movieInfo: {},\n    reviews: []\n  },\n  reducers: {\n    addReview: (state, action) => {\n      var temp = current(state).reviews;\n      temp = [...temp, action.payload];\n      state.reviews = temp;\n    },\n    setReviews: (state, action) => {\n      state.reviews = action.payload;\n    },\n    incrimentLike: (state, action) => {\n      var reviewInd = action.payload.reviewId;\n      var like = action.payload.like;\n      var indeex = console.log(action);\n      temp = temp.reviews[reviewInd].likes;\n      temp = [...temp, { ...like\n      }];\n      state.reviews[reviewInd].likes = temp;\n    },\n    decrimentLike: (state, action) => {\n      var temp = current(state).reviews.map(review => {\n        if (review.id === action.payload) {\n          return { ...review,\n            likes: review.likes - 1\n          };\n        }\n\n        return review;\n      });\n      state.reviews = temp;\n    }\n  },\n  extraReducers: {\n    [addLike.fulfilled]: (state, action) => {\n      if (action.payload) {\n        state.reviews.forEach((review, indx) => {\n          if (review.id === action.payload.reviewId) {\n            state.reviews[indx].likes += 1;\n          }\n        });\n      }\n    }\n  }\n});\nexport const {\n  addReview,\n  setReviews,\n  incrimentLike,\n  decrimentLike\n} = movieSlice.actions;\nexport default movieSlice.reducer;","map":{"version":3,"sources":["/Users/daniel/Desktop/Projects/FilmCritic/client/src/features/movie/movieSlice.js"],"names":["axios","createSlice","createAsyncThunk","current","addLike","reviewId","userId","likeDate","post","likerId","then","response","err","data","success","console","log","message","removeLike","movieSlice","name","initialState","isLoading","movieInfo","reviews","reducers","addReview","state","action","temp","payload","setReviews","incrimentLike","reviewInd","like","indeex","likes","decrimentLike","map","review","id","extraReducers","fulfilled","forEach","indx","actions","reducer"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { createSlice, createAsyncThunk, current } from '@reduxjs/toolkit';\n\nexport const addLike = createAsyncThunk('review/addLike', async ({ reviewId, userId, likeDate }) => {\n    return await axios.post(\"http://localhost:3001/addLike\", {\n        reviewId: reviewId,\n        likerId: userId,\n        likeDate: likeDate,\n    }).then((response, err) => {\n        if (response.data.success === false) {\n            console.log(response.data.message);\n            return null;\n        } else {\n            return response.data;\n        }\n    })\n});\n\nexport const removeLike = createAsyncThunk('review/removeLike', async ({ reviewId, userId }) => {\n    return await axios.post(\"http://localhost:3001/removeLike\", {\n        reviewId: reviewId,\n        likerId: userId\n    }).then((response, err) => {\n        if (response.data.success === false) {\n            console.log(response.data.message);\n            return null;\n        } else {\n            return response.data;\n        }\n    })\n});\n\nexport const movieSlice = createSlice({\n    name: 'movie',\n    initialState: {\n        isLoading: true,\n        movieInfo: {\n            \n        },\n        reviews: []\n    },\n    reducers: {\n        addReview: (state, action) => {\n            var temp = current(state).reviews;\n            temp = [...temp, action.payload];\n            state.reviews = temp;\n        },\n        setReviews: (state, action) => {\n            state.reviews = action.payload;\n        },\n        incrimentLike: (state, action) => {\n            var reviewInd = action.payload.reviewId;\n            var like = action.payload.like;\n\n            var indeex = \n            console.log(action)\n            temp = temp.reviews[reviewInd].likes;\n            temp = [...temp,{...like}];\n            state.reviews[reviewInd].likes = temp;\n        },\n        decrimentLike: (state, action) => {\n            var temp = current(state).reviews.map((review) => {\n                if (review.id === action.payload) {\n                    return {\n                        ...review,\n                        likes: review.likes - 1\n                    }\n                }\n                return review;\n            });\n            state.reviews = temp;\n        },\n    },\n    extraReducers: {\n        [addLike.fulfilled]: (state, action) => {\n            if (action.payload) {\n                state.reviews.forEach((review, indx) => {\n                    if (review.id === action.payload.reviewId) {\n                        state.reviews[indx].likes += 1;\n                    }\n                })\n            }\n        }\n        \n    }\n});\n\nexport const { addReview, setReviews, incrimentLike, decrimentLike } = movieSlice.actions;\n\n\n\n\nexport default movieSlice.reducer;"]},"metadata":{},"sourceType":"module"}