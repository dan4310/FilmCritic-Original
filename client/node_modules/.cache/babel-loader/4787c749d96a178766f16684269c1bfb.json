{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { user as userAPI } from '../../api/user';\nconst fetchLogin = createAsyncThunk('user/loginStatus', async ({\n  userId,\n  username\n}, thunkAPI) => {\n  const response = await userAPI.fetchLogin(userId);\n  return response.data;\n});\nexport const authSlice = createSlice({\n  name: 'user',\n  initialState: {\n    isLoggedIn: false,\n    user: {\n      id: -1,\n      firstName: '',\n      lastName: '',\n      username: '',\n      password: '',\n      email: '',\n      created: ''\n    }\n  },\n  reducers: {\n    setIsLoggedIn: (state, action) => {\n      state.isLoggedIn = action.payload;\n    },\n    setFirstName: (state, action) => {\n      state.user.firstName = action.payload;\n    },\n    setLastName: (state, action) => {\n      state.user.lastName = action.payload;\n    },\n    setUsername: (state, action) => {\n      state.user.username = action.payload;\n    },\n    setEmail: (state, action) => {\n      state.user.email = action.payload;\n    },\n    setCreated: (state, action) => {\n      state.user.created = action.payload;\n    },\n    setUser: (state, action) => {\n      if (action.payload === null) {\n        state.isLoggedIn = false;\n      } else {\n        state.isLoggedIn = true;\n        state.user = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  setIsLoggedIn,\n  setUser,\n  setFirstName,\n  setLastName,\n  setPassword,\n  setUsername,\n  setEmail\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/daniel/Desktop/Projects/FilmCritic/client/src/features/authentication/authSlice.js"],"names":["createSlice","createAsyncThunk","user","userAPI","fetchLogin","userId","username","thunkAPI","response","data","authSlice","name","initialState","isLoggedIn","id","firstName","lastName","password","email","created","reducers","setIsLoggedIn","state","action","payload","setFirstName","setLastName","setUsername","setEmail","setCreated","setUser","setPassword","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAAQC,IAAI,IAAIC,OAAhB,QAA8B,gBAA9B;AAEA,MAAMC,UAAU,GAAGH,gBAAgB,CAC/B,kBAD+B,EAE/B,OAAO;AAACI,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAP,EAA2BC,QAA3B,KAAwC;AACpC,QAAMC,QAAQ,GAAG,MAAML,OAAO,CAACC,UAAR,CAAmBC,MAAnB,CAAvB;AACA,SAAOG,QAAQ,CAACC,IAAhB;AACH,CAL8B,CAAnC;AAQA,OAAO,MAAMC,SAAS,GAAGV,WAAW,CAAC;AACjCW,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAE,KADF;AAEVX,IAAAA,IAAI,EAAE;AACFY,MAAAA,EAAE,EAAE,CAAC,CADH;AAEFC,MAAAA,SAAS,EAAE,EAFT;AAGFC,MAAAA,QAAQ,EAAE,EAHR;AAIFV,MAAAA,QAAQ,EAAE,EAJR;AAKFW,MAAAA,QAAQ,EAAE,EALR;AAMFC,MAAAA,KAAK,EAAE,EANL;AAOFC,MAAAA,OAAO,EAAE;AAPP;AAFI,GAFmB;AAejCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACT,UAAN,GAAmBU,MAAM,CAACC,OAA1B;AACH,KAHK;AAINC,IAAAA,YAAY,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACpB,IAAN,CAAWa,SAAX,GAAuBQ,MAAM,CAACC,OAA9B;AACH,KANK;AAONE,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACpB,IAAN,CAAWc,QAAX,GAAsBO,MAAM,CAACC,OAA7B;AACH,KATK;AAUNG,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACpB,IAAN,CAAWI,QAAX,GAAsBiB,MAAM,CAACC,OAA7B;AACH,KAZK;AAaNI,IAAAA,QAAQ,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACpB,IAAN,CAAWgB,KAAX,GAAmBK,MAAM,CAACC,OAA1B;AACH,KAfK;AAgBNK,IAAAA,UAAU,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACpB,IAAN,CAAWiB,OAAX,GAAqBI,MAAM,CAACC,OAA5B;AACH,KAlBK;AAmBNM,IAAAA,OAAO,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACxB,UAAIA,MAAM,CAACC,OAAP,KAAmB,IAAvB,EAA6B;AAC1BF,QAAAA,KAAK,CAACT,UAAN,GAAmB,KAAnB;AACF,OAFD,MAEO;AACHS,QAAAA,KAAK,CAACT,UAAN,GAAmB,IAAnB;AACAS,QAAAA,KAAK,CAACpB,IAAN,GAAaqB,MAAM,CAACC,OAApB;AACH;AACJ;AA1BK;AAfuB,CAAD,CAA7B;AA6CP,OAAO,MAAM;AAAEH,EAAAA,aAAF;AAAiBS,EAAAA,OAAjB;AAA0BL,EAAAA,YAA1B;AAAwCC,EAAAA,WAAxC;AAAqDK,EAAAA,WAArD;AAAkEJ,EAAAA,WAAlE;AAA+EC,EAAAA;AAA/E,IAA4FlB,SAAS,CAACsB,OAA5G;AAEP,eAAetB,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport {user as userAPI} from '../../api/user';\n\nconst fetchLogin = createAsyncThunk(\n    'user/loginStatus',\n    async ({userId, username}, thunkAPI) => {\n        const response = await userAPI.fetchLogin(userId);\n        return response.data;\n    }\n)\n\nexport const authSlice = createSlice({\n    name: 'user',\n    initialState: {\n        isLoggedIn: false,\n        user: {\n            id: -1,\n            firstName: '',\n            lastName: '',\n            username: '',\n            password: '',\n            email: '',\n            created: '',\n        }\n\n    },\n    reducers: {\n        setIsLoggedIn: (state, action) => {\n            state.isLoggedIn = action.payload;\n        },\n        setFirstName: (state, action) => {\n            state.user.firstName = action.payload;\n        },\n        setLastName: (state, action) => {\n            state.user.lastName = action.payload;\n        },\n        setUsername: (state, action) => {\n            state.user.username = action.payload;\n        },\n        setEmail: (state, action) => {\n            state.user.email = action.payload;\n        },\n        setCreated: (state, action) => {\n            state.user.created = action.payload;\n        },\n        setUser: (state, action) => {\n            if (action.payload === null) {\n               state.isLoggedIn = false;\n            } else {\n                state.isLoggedIn = true;\n                state.user = action.payload;\n            }\n        },\n    }\n});\n\nexport const { setIsLoggedIn, setUser, setFirstName, setLastName, setPassword, setUsername, setEmail } = authSlice.actions;\n\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}