{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport userApi from '../../api/user';\nconst fetchLogin = createAsyncThunk('user/loginStatus', async ({\n  username,\n  password\n}, thunkAPI) => {\n  const response = await userApi.fetchLogin(username, password);\n  return response.data;\n});\nexport const authSlice = createSlice({\n  name: 'user',\n  initialState: {\n    isLoggedIn: false,\n    user: {\n      id: -1,\n      firstName: '',\n      lastName: '',\n      username: '',\n      password: '',\n      email: '',\n      created: ''\n    }\n  },\n  reducers: {\n    setIsLoggedIn: (state, action) => {\n      state.isLoggedIn = action.payload;\n    },\n    setFirstName: (state, action) => {\n      state.user.firstName = action.payload;\n    },\n    setLastName: (state, action) => {\n      state.user.lastName = action.payload;\n    },\n    setUsername: (state, action) => {\n      state.user.username = action.payload;\n    },\n    setEmail: (state, action) => {\n      state.user.email = action.payload;\n    },\n    setCreated: (state, action) => {\n      state.user.created = action.payload;\n    },\n    setUser: (state, action) => {\n      if (action.payload === null) {\n        state.isLoggedIn = false;\n      } else {\n        state.isLoggedIn = true;\n        state.user = action.payload;\n      }\n    },\n    getLogin: (state, action) => {\n      return fetchLogin(action.payload.username, action.payload.password);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchLogin.fulfilled, (state, action) => {\n      console.log('yoooo');\n    });\n  }\n});\nexport const {\n  getLogin,\n  setIsLoggedIn,\n  setUser,\n  setFirstName,\n  setLastName,\n  setPassword,\n  setUsername,\n  setEmail\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/daniel/Desktop/Projects/FilmCritic/client/src/features/authentication/authSlice.js"],"names":["createSlice","createAsyncThunk","userApi","fetchLogin","username","password","thunkAPI","response","data","authSlice","name","initialState","isLoggedIn","user","id","firstName","lastName","email","created","reducers","setIsLoggedIn","state","action","payload","setFirstName","setLastName","setUsername","setEmail","setCreated","setUser","getLogin","extraReducers","builder","addCase","fulfilled","console","log","setPassword","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport userApi from '../../api/user';\n\nconst fetchLogin = createAsyncThunk(\n    'user/loginStatus',\n    async ({username, password}, thunkAPI) => {\n        const response = await userApi.fetchLogin(username, password);\n        return response.data;\n    }\n)\n\nexport const authSlice = createSlice({\n    name: 'user',\n    initialState: {\n        isLoggedIn: false,\n        user: {\n            id: -1,\n            firstName: '',\n            lastName: '',\n            username: '',\n            password: '',\n            email: '',\n            created: '',\n        }\n\n    },\n    reducers: {\n        setIsLoggedIn: (state, action) => {\n            state.isLoggedIn = action.payload;\n        },\n        setFirstName: (state, action) => {\n            state.user.firstName = action.payload;\n        },\n        setLastName: (state, action) => {\n            state.user.lastName = action.payload;\n        },\n        setUsername: (state, action) => {\n            state.user.username = action.payload;\n        },\n        setEmail: (state, action) => {\n            state.user.email = action.payload;\n        },\n        setCreated: (state, action) => {\n            state.user.created = action.payload;\n        },\n        setUser: (state, action) => {\n            if (action.payload === null) {\n               state.isLoggedIn = false;\n            } else {\n                state.isLoggedIn = true;\n                state.user = action.payload;\n            }\n        },\n        getLogin: (state, action) => {\n            return fetchLogin(action.payload.username, action.payload.password);\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchLogin.fulfilled, (state, action) => {\n            console.log('yoooo');\n        })\n    }\n});\n\nexport const { getLogin, setIsLoggedIn, setUser, setFirstName, setLastName, setPassword, setUsername, setEmail } = authSlice.actions;\n\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}