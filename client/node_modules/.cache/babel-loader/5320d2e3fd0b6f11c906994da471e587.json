{"ast":null,"code":"import axios from 'axios';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const getLogin = createAsyncThunk('user/getLogin', async ({\n  username,\n  password\n}) => {\n  return await axios.post(\"http://localhost:3001/login\", {\n    username: username,\n    password: password\n  }).then(response => {\n    if (response.data.message) {\n      console.log(response.data.message);\n      return null;\n    } else {\n      return response.data;\n    }\n  });\n});\nexport const authSlice = createSlice({\n  name: 'user',\n  initialState: {\n    isLoggedIn: false,\n    user: {\n      id: -1,\n      firstName: '',\n      lastName: '',\n      username: '',\n      password: '',\n      email: '',\n      created: ''\n    }\n  },\n  reducers: {\n    setIsLoggedIn: (state, action) => {\n      state.isLoggedIn = action.payload;\n    },\n    setFirstName: (state, action) => {\n      state.user.firstName = action.payload;\n    },\n    setLastName: (state, action) => {\n      state.user.lastName = action.payload;\n    },\n    setUsername: (state, action) => {\n      state.user.username = action.payload;\n    },\n    setEmail: (state, action) => {\n      state.user.email = action.payload;\n    },\n    setCreated: (state, action) => {\n      state.user.created = action.payload;\n    },\n    setUser: (state, action) => {\n      if (action.payload === null) {\n        state.isLoggedIn = false;\n      } else {\n        state.isLoggedIn = true;\n        state.user = action.payload;\n      }\n    }\n  },\n  extraReducers: {\n    [getLogin.fulfilled]: (state, action) => {\n      if (action.payload != null) {\n        state.isLoggedIn = true;\n        state.user = action.payload;\n      }\n\n      return action.payload;\n    }\n  }\n});\nexport const {\n  setIsLoggedIn,\n  setUser,\n  setFirstName,\n  setLastName,\n  setPassword,\n  setUsername,\n  setEmail\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/daniel/Desktop/Projects/FilmCritic/client/src/features/authentication/authSlice.js"],"names":["axios","createSlice","createAsyncThunk","getLogin","username","password","post","then","response","data","message","console","log","authSlice","name","initialState","isLoggedIn","user","id","firstName","lastName","email","created","reducers","setIsLoggedIn","state","action","payload","setFirstName","setLastName","setUsername","setEmail","setCreated","setUser","extraReducers","fulfilled","setPassword","actions","reducer"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const getLogin = createAsyncThunk('user/getLogin', async ({ username, password}) => {\n    return await axios.post(\"http://localhost:3001/login\", {\n              username: username,\n              password: password,\n          }).then((response) => {\n              if (response.data.message) {\n                  console.log(response.data.message);\n                  return null;\n              } else {\n                  return response.data;\n              }\n          });\n  })\n\nexport const authSlice = createSlice({\n    name: 'user',\n    initialState: {\n        isLoggedIn: false,\n        user: {\n            id: -1,\n            firstName: '',\n            lastName: '',\n            username: '',\n            password: '',\n            email: '',\n            created: '',\n        }\n\n    },\n    reducers: {\n        setIsLoggedIn: (state, action) => {\n            state.isLoggedIn = action.payload;\n        },\n        setFirstName: (state, action) => {\n            state.user.firstName = action.payload;\n        },\n        setLastName: (state, action) => {\n            state.user.lastName = action.payload;\n        },\n        setUsername: (state, action) => {\n            state.user.username = action.payload;\n        },\n        setEmail: (state, action) => {\n            state.user.email = action.payload;\n        },\n        setCreated: (state, action) => {\n            state.user.created = action.payload;\n        },\n        setUser: (state, action) => {\n            if (action.payload === null) {\n               state.isLoggedIn = false;\n            } else {\n                state.isLoggedIn = true;\n                state.user = action.payload;\n            }\n        }\n    },\n    extraReducers: {\n        [getLogin.fulfilled]: (state, action) => {\n            if (action.payload != null) {\n                state.isLoggedIn = true;\n                state.user = action.payload;\n            }\n            return action.payload;\n        }\n    }\n});\n\nexport const { setIsLoggedIn, setUser, setFirstName, setLastName, setPassword, setUsername, setEmail } = authSlice.actions;\n\n\n\n\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}