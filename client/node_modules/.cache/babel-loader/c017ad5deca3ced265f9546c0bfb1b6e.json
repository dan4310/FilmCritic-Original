{"ast":null,"code":"import axios from 'axios';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const getReviews = createAsyncThunk('movie/getReviews', async ({\n  movieId\n}) => {\n  return await axios.get(\"http://localhost:3001/getReviews\", {\n    params: {\n      movieId: movieId\n    }\n  }).then(response => {\n    if (response.data.message) {\n      console.log(response.data.message);\n      return null;\n    } else {\n      return response.data;\n    }\n  });\n});\nexport const getLikes = createAsyncThunk('review/getLikes', async ({\n  reviewId\n}) => {\n  return await axios.get(\"http://localhost:3001/getLikes\", {\n    params: {\n      reviewId: reviewId\n    }\n  }).then(response => {\n    if (response.data.message) {\n      console.log(response.data.message);\n      return null;\n    } else {\n      return {\n        response: response.data,\n        reviewId: reviewId\n      };\n    }\n  });\n});\nexport const movieSlice = createSlice({\n  name: 'movie',\n  initialState: {\n    isLoading: true,\n    movieInfo: {},\n    reviews: []\n  },\n  reducers: {\n    addReview: (state, action) => {\n      state.reviews.push(action.payload);\n    }\n  },\n  extraReducers: {\n    [getReviews.fulfilled]: (state, action) => {\n      if (action.payload) {\n        state.reviews = action.payload;\n        state.isLoading = false;\n      }\n    },\n    [getLikes.fulfilled]: (state, action) => {\n      if (action.payload) {\n        state.reviews.map(review => {});\n      }\n    }\n  }\n});\nexport const {\n  addReview\n} = movieSlice.actions;\nexport default movieSlice.reducer;","map":{"version":3,"sources":["/Users/daniel/Desktop/Projects/FilmCritic/client/src/features/movie/movieSlice.js"],"names":["axios","createSlice","createAsyncThunk","getReviews","movieId","get","params","then","response","data","message","console","log","getLikes","reviewId","movieSlice","name","initialState","isLoading","movieInfo","reviews","reducers","addReview","state","action","push","payload","extraReducers","fulfilled","map","review","actions","reducer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,UAAU,GAAGD,gBAAgB,CAAC,kBAAD,EAAqB,OAAO;AAAEE,EAAAA;AAAF,CAAP,KAAuB;AAClF,SAAO,MAAMJ,KAAK,CAACK,GAAN,CAAU,kCAAV,EAA8C;AACjDC,IAAAA,MAAM,EAAE;AACNF,MAAAA,OAAO,EAAEA;AADH;AADyC,GAA9C,EAIJG,IAJI,CAIEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,IAAT,CAAcC,OAA1B;AACA,aAAO,IAAP;AACH,KAHD,MAGO;AACH,aAAOF,QAAQ,CAACC,IAAhB;AACH;AACJ,GAXM,CAAb;AAYH,CAbyC,CAAnC;AAgBP,OAAO,MAAMI,QAAQ,GAAGX,gBAAgB,CAAC,iBAAD,EAAoB,OAAO;AAAEY,EAAAA;AAAF,CAAP,KAAwB;AAChF,SAAO,MAAMd,KAAK,CAACK,GAAN,CAAU,gCAAV,EAA4C;AACrDC,IAAAA,MAAM,EAAE;AACJQ,MAAAA,QAAQ,EAAEA;AADN;AAD6C,GAA5C,EAIVP,IAJU,CAIJC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,IAAT,CAAcC,OAA1B;AACA,aAAO,IAAP;AACH,KAHD,MAGO;AACH,aAAO;AAACF,QAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAApB;AAA0BK,QAAAA,QAAQ,EAAEA;AAApC,OAAP;AACH;AACJ,GAXY,CAAb;AAYH,CAbuC,CAAjC;AAeP,OAAO,MAAMC,UAAU,GAAGd,WAAW,CAAC;AAClCe,EAAAA,IAAI,EAAE,OAD4B;AAElCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAE,IADD;AAEVC,IAAAA,SAAS,EAAE,EAFD;AAKVC,IAAAA,OAAO,EAAE;AALC,GAFoB;AASlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACH,OAAN,CAAcK,IAAd,CAAmBD,MAAM,CAACE,OAA1B;AACH;AAHK,GATwB;AAclCC,EAAAA,aAAa,EAAE;AACX,KAACxB,UAAU,CAACyB,SAAZ,GAAwB,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAIA,MAAM,CAACE,OAAX,EAAoB;AAChBH,QAAAA,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACE,OAAvB;AACAH,QAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACH;AACJ,KANU;AAOX,KAACL,QAAQ,CAACe,SAAV,GAAsB,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAIA,MAAM,CAACE,OAAX,EAAoB;AAChBH,QAAAA,KAAK,CAACH,OAAN,CAAcS,GAAd,CAAkBC,MAAM,IAAI,CAE3B,CAFD;AAGH;AACJ;AAbU;AAdmB,CAAD,CAA9B;AA+BP,OAAO,MAAM;AAAER,EAAAA;AAAF,IAAgBP,UAAU,CAACgB,OAAjC;AAKP,eAAehB,UAAU,CAACiB,OAA1B","sourcesContent":["import axios from 'axios';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const getReviews = createAsyncThunk('movie/getReviews', async ({ movieId }) => {\n    return await axios.get(\"http://localhost:3001/getReviews\", {\n              params: {\n                movieId: movieId,\n              }\n          }).then((response) => {\n              if (response.data.message) {\n                  console.log(response.data.message);\n                  return null;\n              } else {\n                  return response.data;\n              }\n          });\n});\n\n\nexport const getLikes = createAsyncThunk('review/getLikes', async ({ reviewId }) => {\n    return await axios.get(\"http://localhost:3001/getLikes\", {\n        params: {\n            reviewId: reviewId,\n        }\n    }).then((response) => {\n        if (response.data.message) {\n            console.log(response.data.message);\n            return null;\n        } else {\n            return {response: response.data, reviewId: reviewId};\n        }\n    })\n});\n\nexport const movieSlice = createSlice({\n    name: 'movie',\n    initialState: {\n        isLoading: true,\n        movieInfo: {\n            \n        },\n        reviews: []\n    },\n    reducers: {\n        addReview: (state, action) => {\n            state.reviews.push(action.payload);\n        }\n    },\n    extraReducers: {\n        [getReviews.fulfilled]: (state, action) => {\n            if (action.payload) {\n                state.reviews = action.payload;\n                state.isLoading = false;\n            } \n        },\n        [getLikes.fulfilled]: (state, action) => {\n            if (action.payload) {\n                state.reviews.map(review => {\n                    \n                })\n            }\n        }\n    }\n});\n\nexport const { addReview } = movieSlice.actions;\n\n\n\n\nexport default movieSlice.reducer;"]},"metadata":{},"sourceType":"module"}